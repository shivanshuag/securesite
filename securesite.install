<?php
// $Id$

/**
 * @file
 * Secure Site installation functions
 */

/**
 * Implementation of hook_enable().
 */
function securesite_enable() {
  if (variable_get('securesite_enabled', SECURESITE_DISABLED) == SECURESITE_403) {
    if (($site_403 = variable_get('site_403', '')) != 'securesite_403') {
      variable_set('securesite_403', variable_get('site_403', ''));
      variable_set('site_403', 'securesite_403');
    }
  }
}

/**
 * Implementation of hook_disable().
 */
function securesite_disable() {
  variable_set('site_403', variable_get('securesite_403', variable_get('site_403', '')));
}

/**
 * Implentation of hook_uninstall().
 */
function securesite_uninstall() {
  variable_del('securesite_enabled');
  variable_del('securesite_403');
  variable_del('securesite_type');
  variable_del('securesite_realm');
  variable_del('securesite_guest_name');
  variable_del('securesite_guest_pass');
  variable_del('securesite_login_form');
  variable_del('securesite_reset_form');
  foreach (_securesite_schema() as $name => $table) {
    db_query("DROP TABLE IF EXISTS {%s}", $name);
  }
}

function _securesite_schema() {
  $schema['securesite_passwords'] = array(
    'description' => t('Stores user passwords.'),
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
        'description' => t("User's {users}.name."),
      ),
      'realm' => array(
        'type' => 'text',
        'description' => t("User's realm."),
      ),
      'pass' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => t("User's password (plain text)."),
      ),
    ),
    'primary key' => array('name'),
    'indexes' => array(
      'name' => array('name'),
    ),
  );
  $schema['securesite_nonce'] = array(
    'description' => t('Stores nonce values.'),
    'fields' => array(
      'nonce' => array(
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
        'description' => t('Nonce value.'),
      ),
      'qop' => array(
        'type' => 'text',
        'description' => t('Quality of protection.'),
      ),
      'nc' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Number of times nonce has been used.'),
      ),
      'opaque' => array(
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
        'description' => t('Opaque value.'),
      ),
      'hash' => array(
        'type' => 'text',
        'description' => t('Hashed entity body to see if message was tampered with.'),
      ),
      'time' => array(
        'type' => 'int',
        'description' => t('Last use timestamp.'),
      ),
      'realm' => array(
        'type' => 'text',
        'description' => t("Nonce realm."),
      ),
    ),
    'primary key' => array('nonce, realm'),
    'indexes' => array(
      'nonce' => array('nonce'),
      'opaque' => array('opaque'),
      'realm' => array('realm'),
    ),
  );
  return $schema;
}

/**
 * Implementation of hook_update_N().
 * Convert variables from older versions.
 */
function securesite_update_6200() {
  switch (variable_get('securesite_enabled', SECURESITE_DISABLED)) {
    case 2:
      variable_del('securesite_enabled');
      break;
    case 3:
      variable_set('securesite_enabled', SECURESITE_ALWAYS);
      variable_set('securesite_type', SECURESITE_FORM);
      break;
  }
  variable_del('securesite_filter_pages');
  variable_del('securesite_filter_pages_type');
  return array();
}

