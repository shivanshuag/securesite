<?php
// $Id$

/**
 * Implementation of hook_perm().
 */
function securesite_perm() {
  return array('access site');
}

function securesite_menu($may_cache) {
  if ($may_cache) {
    $items[] = array('path' => 'admin/settings/securesite', 
      'title' => t('Secure site configuration'), 
      'callback' => 'drupal_get_form',
      'callback arguments' => 'securesite_admin_settings',
      'description' => t('Configure Secure site module'),
      );
  }
  return $items;
}

/**
 * Implementation of hook_settings().
 */
function securesite_admin_settings() {
  global $base_url;

  // Authentication Settings
  $form['authentication'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication'),
  );

  $form['authentication']['securesite_enabled'] = array(
    '#type' => 'radios',
    '#title' => t('Secure Site'),
    '#default_value' => variable_get('securesite_enabled', 0),
    '#options' => array(
      t('Disabled'),
      t('Enabled with web browser HTTP-AUTH security'),
      t('Enabled with web browser HTTP-AUTH security, with browser logout workaround'),
      t('Enabled with HTML login form'),
    ),
    '#description' => t('HTTP-AUTH requires <a href="!extra">extra configuration</a> if your PHP is not configured as an Apache module. At least one role must also have permission under <a href="!access">access control page</a>. The browser workaround is for when a user logs out, as all browsers manage the HTTP Auth variables differently the workaround will append to the end of the realm a random number to force the browser to clear the username and password. The workaround is only for some browsers. Without the workaround user will not be properly logged out in some browsers.', array('!extra' => url('http://drupal.org/node/28408'), '!access' => url('admin/access'))),
  );

  $form['authentication']['securesite_guest_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Guest User'),
    '#default_value' => variable_get('securesite_guest_name', ''),
    '#length' => 30,
    '#maxlength' => 40,
    '#description' => t('Guests can access the secured site without an account. Leave empty for no guest access'),
  );

  $form['authentication']['securesite_guest_pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Guest Password'),
    '#default_value' => variable_get('securesite_guest_pass', ''),
    '#length' => 30,
    '#maxlength' => 40,
    '#description' => t('Leave empty for no guest access'),
  );

  $form['authentication']['securesite_realm'] = array(
    '#type' => 'textfield',
    '#title' => t('Authentication realm'),
    '#default_value' => variable_get('securesite_realm', ltrim($base_url, 'htps:/')),
    '#length' => 30,
    '#maxlength' => 40,
    '#description' => t('Name to identify log-in area.'),
  );

  // HTML Login form Settings
  $form['login_form'] = array(
    '#type' => 'fieldset',
    '#title' => t('HTML Login form'),
  );

  $form['login_form']['securesite_login_form'] = array(
    '#type' => 'textarea',
    '#title' => t('Message for HTML Login form'),
    '#default_value' =>  variable_get('securesite_login_form', t('Enter your %site username and password.', array('%site' => variable_get('site_name', 'drupal')))),
    '#length' => 60,
    '#height' => 3,
    '#description' => t('Username and Password heading.'),
  );

  $form['login_form']['securesite_request_form'] = array(
    '#type' => 'textarea',
    '#title' => t('Message for Request Password Reset form'),
    '#default_value' =>  variable_get('securesite_request_form', t('Enter your username <strong><em>or</em></strong> your e-mail address.')),
    '#length' => 60,
    '#height' => 3,
    '#description' => t('Leave empty to not process password resets through this module.'),
  );

  // Bypass Login Filter Pages Settings
  $form['filter_pages'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bypass Login Filter Pages'),
  );

  $form['filter_pages']['securesite_filter_pages_type'] = array(
    '#type' => 'radios',
    '#title' => t('Filter Type'),
    '#default_value' => variable_get('securesite_filter_pages_type', 0),
    '#options' => array(
      t('Only the listed pages.'),
      t('Every page except the listed pages.'),
    ),
  );

  $form['filter_pages']['securesite_filter_pages'] = array(
    '#type' => 'textarea',
    '#title' => t('Pages'),
    '#default_value' =>  variable_get('securesite_filter_pages', ''),
    '#length' => 60,
    '#height' => 3,
    '#description' => t("Enter one page per line as Drupal paths. The '*' character is a wildcard. Example paths are '<em>blog</em>' for the blog page and '<em>blog/*</em>' for every personal blog."),
  );

  $form['filter_pages']['securesite_ip_filter_check'] = array(
    '#type' => 'checkbox',
    '#title' => t('Session IP Check'),
    '#default_value' => variable_get('securesite_ip_filter_check', FALSE),
    '#description' => t("Check if a session exists for the users IP address before bypassing the login. Works for embedded video as media players does not have a session, but the user requesting to play the video does.  Anonymous User role will require the appropriate permission to the pages being bypassed."),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_init().
 */
function securesite_init() {
  global $user, $base_url;

  $guest_name         = variable_get('securesite_guest_name', '');
  $guest_pass         = variable_get('securesite_guest_pass', '');
  $securesite_enabled = variable_get('securesite_enabled', 0);

  // bypass cron.php
  if (!$securesite_enabled || strstr(request_uri(),'cron.php')) {
    return;
  }

  // create edit variables
  if ($securesite_enabled == 3 && !empty($_POST)) {
    $edit = $_POST['edit'];
  }
  elseif($securesite_enabled == 1 || $securesite_enabled == 2) {
    $edit = array('name'=> $_SERVER['PHP_AUTH_USER'], 'pass' => $_SERVER['PHP_AUTH_PW']);
  }

  // only bypass if user is not logged in
  if (!$user->uid) {
    // Check if page should be Bypassed
    $check_name = securesite_filter_check();
    if ($check_name) {
      if (!is_bool($check_name)) {
        $user = user_load(array('name' => $check_name, 'status' => 1));
      }
      return;
    }
  }

  // check if loged in user
  if (($user->uid == 1) || ($user->uid && user_access('access site'))) {
    return;
  }

  // check if we should continue
  if (empty($edit) && ($user->uid == 0) || (!$user->uid && user_access('access site'))) {
    securesite_user_auth();
  }

  // check if guest users
  if ((!empty($guest_name) && $guest_name == $edit['name'] && $guest_pass == $edit['pass']) || $_SESSION['securesite_guest']) {
    // set guest SESSION to prevent re-login (note: guest cant log out)
    $_SESSION['securesite_guest'] = TRUE;
    return;
  }
  unset($_SESSION['securesite_guest']); // if not a guest make sure to unset guest session

  $account = user_authenticate($edit['name'], $edit['pass']);

  if ($account->uid && user_access('access site', $account)) {
    // login successful
    $user = $account;

    watchdog('user', t('Session opened for %name.', array('%name' => securesite_theme_placeholder($user->name))));
    db_query("UPDATE {users} SET login = '%d' WHERE uid = '%s'", time(), $user->uid);
    user_module_invoke('login', $edit, $user);
    if (arg(0) != 'logout') { // only redirect if on logout page
      return;
    }
    securesite_goto();
  }
  else {
    // login failed
    securesite_user_auth();
  }
}

/**
 * Implementation of hook_user().
 */
function securesite_user($op, &$edit, &$user) {
  if ($op == 'logout') {
    module_invoke_all('exit', request_uri());
    unset($GLOBALS['user']);

    $securesite_enabled = variable_get('securesite_enabled', 0);
    if ($securesite_enabled == 1 || $securesite_enabled == 2) {
      securesite_user_auth();
    }
    else {
      // redirect first to browser prevent caching problems
      securesite_goto();
    }
  }
}

/**
 * Securesite redirect
 */
function securesite_goto() {
  global $base_url;

  $url = (arg(0) == 'logout' ? $base_url :  request_uri());
  if (ini_get('session.use_trans_sid') && session_id() && !strstr($url, session_id())) {
    $url .= (strstr($url, '?') && !strstr($url, $sid) ? '&' : '?') . session_name() . '=' . session_id();
  }

  header('Location: ' . $url);
  exit;
}

function securesite_theme_placeholder($text) {
  return '<strong>' . htmlspecialchars($text, ENT_QUOTES) . '</strong>';
}

/**
 * displays auth dialog and sends password requests
 */
function securesite_user_auth() {
  global $user, $base_url;
  include_once('securesite.inc');
  $edit = $_POST['edit'];
  $securesite_enabled = variable_get('securesite_enabled', 0);
  unset($content);

  // Log failed requests
  if ($_POST['securesite_login_form'] && $edit['name'] && $edit['pass']) {
    watchdog('user', t('Login attempt failed for %name.', array('%name' => securesite_theme_placeholder($edit['name']))));
    drupal_set_message(t('Sorry. Unrecognized username or password.'), 'error');
  }

  // set user messages
  if ($_POST['securesite_request_form'] && $edit['name'] && $edit['mail']) {
    if (!$account = user_load(array('name' => $edit['name'], 'status' => 1))) {
      drupal_set_message(t('Sorry. Unrecognized username or e-mail address.'), 'error');
    }
    elseif (!$account = user_load(array('mail' => $edit['mail'], 'status' => 1))) {
      drupal_set_message(t('Sorry. Unrecognized username or e-mail address.'), 'error');
    }
  }

  // Email password
  if ($account->uid) {
    $from = variable_get('site_mail', ini_get('sendmail_from'));
    $pass = user_password();
    // Save new password:
    user_save($account, array('pass' => $pass));
    // Mail new password:
    $variables = array('%username' => $account->name, '%site' => variable_get('site_name', 'drupal'), '%login_url' => user_pass_reset_url($account), '%uri' => $base_url, '%uri_brief' => substr($base_url, strlen('http://')), '%mailto' => $account->mail, '%date' => format_date(time()), '%login_uri' => url('user', NULL, NULL, TRUE), '%edit_uri' => url('user/'. $account->uid .'/edit', NULL, NULL, TRUE));

    $subject      = _user_mail_text('pass_subject', $variables);
    $body         = _user_mail_text('pass_body', $variables);
    $headers      = "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from";
    $mail_success = user_mail($account->mail, $subject, $body, $headers);

    if ($mail_success) {
      watchdog('user', t('Password mailed to %name at %email.', array('%name' => securesite_theme_placeholder($account->name), '%email' => securesite_theme_placeholder($account->mail))));
      drupal_set_message(t('Your password and further instructions have been sent to your e-mail address.'));
    }
    else {
      watchdog('user', t('Error mailing password to %name at %email.', array('%name' => securesite_theme_placeholder($account->name), '%email' => securesite_theme_placeholder($account->mail))), WATCHDOG_ERROR);
      drupal_set_message(t('Unable to send mail. Please contact the site admin.', 'error'));
    }
    //nowhere to go!! //securesite_goto();
  }

  // get content for dialog
  if ($securesite_enabled == 3) {
    $content = _securesite_login_form();
  }
  $content .= _securesite_request_form();

  // HTTP AUTH
  if (($securesite_enabled == 1 || $securesite_enabled == 2) && !$account->uid) {
    $realm = variable_get('securesite_realm', variable_get('site_name', 'drupal'));

    if ($securesite_enabled == 2) {
      // fix logout on cancel in Opera and IE
      $browser_user_agent = strtolower( $_SERVER['HTTP_USER_AGENT'] );
      if (strpos($browser_user_agent, "gecko") === FALSE) { //Firefox
        $suffix = ' - '. mt_rand(10, 99);
      }
      else { //Opera, IE, others?
        $suffix = '';
      }
      $realm .= $suffix;
    }

    header('WWW-Authenticate: Basic realm="'. $realm .'"');
    header('HTTP/1.0 401 Unauthorized');
  }

  // display dialog
  dialog_page($content);
  drupal_set_title('login');
  module_invoke_all('exit', request_uri());
  exit;
}

/**
 * check if pages should bypass securesite
 */
function securesite_filter_check() {

  // Ignore page if requested (code used form block filter code.)
  $pages = variable_get('securesite_filter_pages', '');

  $path       = drupal_get_path_alias($_GET['q']);
  $regexp     = '/^(' . preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1' . preg_quote(variable_get('site_frontpage', 'node'), '/') . '\2'), preg_quote($pages, '/')) . ')$/';

  if (preg_match($regexp, $path)) {
    if (variable_get('securesite_ip_filter_check', false)) {
      if (variable_get('securesite_filter_pages_type', 0) == 0) {
        return securesite_session_ip_check();
      }
      else {
        return false;
      }
    }
    else {
      if (variable_get('securesite_filter_pages_type', 0) == 0) {
        return true;
      }
      else {
        return false;
      }
    }
  }
  else {
    if (variable_get('securesite_ip_filter_check', false)) {
      if (variable_get('securesite_filter_pages_type', 0) == 1) {
        return securesite_session_ip_check();
      }
      else {
        return false;
      }
    }
    else {
      if (variable_get('securesite_filter_pages_type', 0) == 1) {
        return true;
      }
      else {
        return false;
      }
    }
  }
}

/**
 * check if for active user sessions, used by securesite_filter_check()
 */
function securesite_session_ip_check() {
  $result = db_query("SELECT u.name FROM users u INNER JOIN sessions s ON u.uid=s.uid WHERE s.hostname='%s' AND s.uid <> 0", $_SERVER['REMOTE_ADDR']);
  if ($s = db_fetch_array($result)) {
    return $s['name'];
  }
  else {
    return false;
  }
}
